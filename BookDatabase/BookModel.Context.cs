//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace BookDatabase
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class BookModel : DbContext
    {
        public BookModel()
            : base("name=BookModel")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Author> Authors { get; set; }
        public virtual DbSet<BookEdition> BookEditions { get; set; }
        public virtual DbSet<BookItem> BookItems { get; set; }
        public virtual DbSet<BookTitle> BookTitles { get; set; }
        public virtual DbSet<BookTopic> BookTopics { get; set; }
        public virtual DbSet<EbookType> EbookTypes { get; set; }
        public virtual DbSet<Publisher> Publishers { get; set; }
    
        public virtual int DeleteAuthor(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteAuthor", idParameter);
        }
    
        public virtual int DeleteBookEdition(string isbn)
        {
            var isbnParameter = isbn != null ?
                new ObjectParameter("isbn", isbn) :
                new ObjectParameter("isbn", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteBookEdition", isbnParameter);
        }
    
        public virtual int DeleteBookItem(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteBookItem", idParameter);
        }
    
        public virtual int DeleteBookTitle(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteBookTitle", idParameter);
        }
    
        public virtual int DeleteBookTopic(Nullable<short> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteBookTopic", idParameter);
        }
    
        public virtual int DeleteEbookType(Nullable<short> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteEbookType", idParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> InsertAuthor(string name)
        {
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("InsertAuthor", nameParameter);
        }
    
        public virtual int InsertBookEdition(string isbn, Nullable<int> titleId, Nullable<short> edition, Nullable<short> year, Nullable<decimal> rating, Nullable<short> review, string amazonUrl)
        {
            var isbnParameter = isbn != null ?
                new ObjectParameter("isbn", isbn) :
                new ObjectParameter("isbn", typeof(string));
    
            var titleIdParameter = titleId.HasValue ?
                new ObjectParameter("titleId", titleId) :
                new ObjectParameter("titleId", typeof(int));
    
            var editionParameter = edition.HasValue ?
                new ObjectParameter("edition", edition) :
                new ObjectParameter("edition", typeof(short));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("year", year) :
                new ObjectParameter("year", typeof(short));
    
            var ratingParameter = rating.HasValue ?
                new ObjectParameter("rating", rating) :
                new ObjectParameter("rating", typeof(decimal));
    
            var reviewParameter = review.HasValue ?
                new ObjectParameter("review", review) :
                new ObjectParameter("review", typeof(short));
    
            var amazonUrlParameter = amazonUrl != null ?
                new ObjectParameter("amazonUrl", amazonUrl) :
                new ObjectParameter("amazonUrl", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertBookEdition", isbnParameter, titleIdParameter, editionParameter, yearParameter, ratingParameter, reviewParameter, amazonUrlParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> InsertBookItem(string isbn, Nullable<short> ebookTypeId, string filePath)
        {
            var isbnParameter = isbn != null ?
                new ObjectParameter("isbn", isbn) :
                new ObjectParameter("isbn", typeof(string));
    
            var ebookTypeIdParameter = ebookTypeId.HasValue ?
                new ObjectParameter("ebookTypeId", ebookTypeId) :
                new ObjectParameter("ebookTypeId", typeof(short));
    
            var filePathParameter = filePath != null ?
                new ObjectParameter("filePath", filePath) :
                new ObjectParameter("filePath", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("InsertBookItem", isbnParameter, ebookTypeIdParameter, filePathParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> InsertBookTitle(string title, Nullable<short> bookTopicId)
        {
            var titleParameter = title != null ?
                new ObjectParameter("title", title) :
                new ObjectParameter("title", typeof(string));
    
            var bookTopicIdParameter = bookTopicId.HasValue ?
                new ObjectParameter("bookTopicId", bookTopicId) :
                new ObjectParameter("bookTopicId", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("InsertBookTitle", titleParameter, bookTopicIdParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> InsertBookTopic(string topic, Nullable<short> superTopicId, string folderPath)
        {
            var topicParameter = topic != null ?
                new ObjectParameter("topic", topic) :
                new ObjectParameter("topic", typeof(string));
    
            var superTopicIdParameter = superTopicId.HasValue ?
                new ObjectParameter("superTopicId", superTopicId) :
                new ObjectParameter("superTopicId", typeof(short));
    
            var folderPathParameter = folderPath != null ?
                new ObjectParameter("folderPath", folderPath) :
                new ObjectParameter("folderPath", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("InsertBookTopic", topicParameter, superTopicIdParameter, folderPathParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> InsertEbookType(string type)
        {
            var typeParameter = type != null ?
                new ObjectParameter("type", type) :
                new ObjectParameter("type", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("InsertEbookType", typeParameter);
        }
    
        public virtual int UpdateAuthor(Nullable<int> id, string name)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateAuthor", idParameter, nameParameter);
        }
    
        public virtual int UpdateBookEdition(string isbn, Nullable<int> titleId, Nullable<short> edition, Nullable<short> year, Nullable<decimal> rating, Nullable<short> review, string amazonUrl)
        {
            var isbnParameter = isbn != null ?
                new ObjectParameter("isbn", isbn) :
                new ObjectParameter("isbn", typeof(string));
    
            var titleIdParameter = titleId.HasValue ?
                new ObjectParameter("titleId", titleId) :
                new ObjectParameter("titleId", typeof(int));
    
            var editionParameter = edition.HasValue ?
                new ObjectParameter("edition", edition) :
                new ObjectParameter("edition", typeof(short));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("year", year) :
                new ObjectParameter("year", typeof(short));
    
            var ratingParameter = rating.HasValue ?
                new ObjectParameter("rating", rating) :
                new ObjectParameter("rating", typeof(decimal));
    
            var reviewParameter = review.HasValue ?
                new ObjectParameter("review", review) :
                new ObjectParameter("review", typeof(short));
    
            var amazonUrlParameter = amazonUrl != null ?
                new ObjectParameter("amazonUrl", amazonUrl) :
                new ObjectParameter("amazonUrl", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateBookEdition", isbnParameter, titleIdParameter, editionParameter, yearParameter, ratingParameter, reviewParameter, amazonUrlParameter);
        }
    
        public virtual int UpdateBookItem(Nullable<int> id, string isbn, Nullable<short> ebookTypeId, string filePath)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var isbnParameter = isbn != null ?
                new ObjectParameter("isbn", isbn) :
                new ObjectParameter("isbn", typeof(string));
    
            var ebookTypeIdParameter = ebookTypeId.HasValue ?
                new ObjectParameter("ebookTypeId", ebookTypeId) :
                new ObjectParameter("ebookTypeId", typeof(short));
    
            var filePathParameter = filePath != null ?
                new ObjectParameter("filePath", filePath) :
                new ObjectParameter("filePath", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateBookItem", idParameter, isbnParameter, ebookTypeIdParameter, filePathParameter);
        }
    
        public virtual int UpdateBookTitle(Nullable<int> id, string title, Nullable<short> bookTopicId)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var titleParameter = title != null ?
                new ObjectParameter("title", title) :
                new ObjectParameter("title", typeof(string));
    
            var bookTopicIdParameter = bookTopicId.HasValue ?
                new ObjectParameter("bookTopicId", bookTopicId) :
                new ObjectParameter("bookTopicId", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateBookTitle", idParameter, titleParameter, bookTopicIdParameter);
        }
    
        public virtual int UpdateBookTopic(Nullable<short> id, string topic, Nullable<short> superTopicId, string folderPath)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(short));
    
            var topicParameter = topic != null ?
                new ObjectParameter("topic", topic) :
                new ObjectParameter("topic", typeof(string));
    
            var superTopicIdParameter = superTopicId.HasValue ?
                new ObjectParameter("superTopicId", superTopicId) :
                new ObjectParameter("superTopicId", typeof(short));
    
            var folderPathParameter = folderPath != null ?
                new ObjectParameter("folderPath", folderPath) :
                new ObjectParameter("folderPath", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateBookTopic", idParameter, topicParameter, superTopicIdParameter, folderPathParameter);
        }
    
        public virtual int UpdateEbookType(Nullable<short> id, string type)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(short));
    
            var typeParameter = type != null ?
                new ObjectParameter("type", type) :
                new ObjectParameter("type", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateEbookType", idParameter, typeParameter);
        }
    }
}
